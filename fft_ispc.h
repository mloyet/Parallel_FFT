//
// fft_ispc.h
// (Header automatically generated by the ispc compiler.)
// DO NOT EDIT THIS FILE.
//

#pragma once
#include <stdint.h>



#ifdef __cplusplus
namespace ispc { /* namespace */
#endif // __cplusplus

#ifndef __ISPC_ALIGN__
#if defined(__clang__) || !defined(_MSC_VER)
// Clang, GCC, ICC
#define __ISPC_ALIGN__(s) __attribute__((aligned(s)))
#define __ISPC_ALIGNED_STRUCT__(s) struct __ISPC_ALIGN__(s)
#else
// Visual Studio
#define __ISPC_ALIGN__(s) __declspec(align(s))
#define __ISPC_ALIGNED_STRUCT__(s) __ISPC_ALIGN__(s) struct
#endif
#endif


///////////////////////////////////////////////////////////////////////////
// Functions exported from ispc code
///////////////////////////////////////////////////////////////////////////
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
extern "C" {
#endif // __cplusplus
    extern void fft_ispc_eight(double * X_r, double * X_c, double * LUTS, double * LUTC);
    extern void fft_ispc_eight_out(double * X_r, double * X_c, double * x_r, double * x_c, double * LUTS, double * LUTC, int32_t s);
    extern void fft_ispc_four_out(double * X_r, double * X_c, double * x_r, double * x_c, double * LUTS, double * LUTC, int32_t s);
    extern void fft_ispc_four_out_cache(double * X_r, double * X_c, double * x_r, double * x_c, double * LUTS, double * LUTC, int32_t start);
    extern void fft_ispc_out(double * X_r, double * X_c, double * twiddle_r, double * twiddle_c, int32_t N);
    extern void fft_ispc_out_raw(double * X_r, double * X_c, int32_t N);
    extern void fft_ispc_out_split(double * X_r, double * X_c, double * twiddle_r, double * twiddle_c, int32_t N, int32_t start, int32_t end);
    extern void fft_twiddle(double * E_r, double * E_c, double * O_r, double * O_c, double * twiddle_r, double * twiddle_c, double * A_r, double * A_c, int32_t N);
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
} /* end extern C */
#endif // __cplusplus


#ifdef __cplusplus
} /* namespace */
#endif // __cplusplus
